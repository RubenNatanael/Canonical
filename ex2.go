/*
    Some possible test cases for the function are:
        - What happens if the path is empty or the file does not exist
        - The file is empty
        - The file is too large
        - The file does not have the required permissions
        - The path points to a directory or a symlink

    Use cases for this function:
        - The function is useful for testing purposes in other programs that read files, where
          we need to generate many files with different data.
        - It can be used to test programs that search for patterns, as random data can help
          simulate various scenarios.
        - Random data generated by this function can also be useful in AI reinforcement learning
          or similar fields.
*/
package main

import (
	"crypto/rand"
	"errors"
	"io"
	"os"
)

func check(e error) {
    if e != nil {
        panic(e)
    }
}

func Shred(path string) error {
	
	file, err := os.OpenFile(path, os.O_WRONLY, 0)
	check(err)
	defer file.Close()

	// Get file size
	info, err := file.Stat()
	check(err)

	size := info.Size()
	if size == 0 {
		return os.Remove(path)
	}

	buf := make([]byte, 4096)

	for pass := 0; pass < 3; pass++ {
		//Reset offset to start of file
		if _, err := file.Seek(0, io.SeekStart); err != nil {
			return err
		}

		remaining := size
		for remaining > 0 {
			chunkSize := int64(len(buf))
			if remaining < chunkSize {
				chunkSize = remaining
			}

			// Create random bytes
			_, err := io.ReadFull(rand.Reader, buf[:chunkSize])
			check(err)

			// Write the bytes
			_, err := file.Write(buf[:chunkSize])
			check(err)

			remaining -= chunkSize
		}

		err := file.Sync()
		check(err)
	}

	file.Close()

	return nil
}


